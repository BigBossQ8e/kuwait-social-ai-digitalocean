#!/bin/bash

# Kuwait Social AI - Security Configuration Script
# This script handles secure configuration for DigitalOcean deployment

set -e

# Function to create secure configuration
create_secure_config() {
    cat > config/secure_settings.py << 'EOF'
"""
Secure configuration for production deployment
Auto-generated by secure-config.sh
"""
import os
from datetime import timedelta

class SecureConfig:
    # Security headers
    SECURITY_HEADERS = {
        'X-Frame-Options': 'SAMEORIGIN',
        'X-Content-Type-Options': 'nosniff',
        'X-XSS-Protection': '1; mode=block',
        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
        'Content-Security-Policy': "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.openai.com"
    }
    
    # Session configuration
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'
    PERMANENT_SESSION_LIFETIME = timedelta(hours=24)
    
    # JWT configuration
    JWT_TOKEN_LOCATION = ['headers', 'cookies']
    JWT_COOKIE_SECURE = True
    JWT_COOKIE_CSRF_PROTECT = True
    JWT_ACCESS_TOKEN_EXPIRES = timedelta(hours=1)
    JWT_REFRESH_TOKEN_EXPIRES = timedelta(days=30)
    
    # Rate limiting
    RATELIMIT_ENABLED = True
    RATELIMIT_DEFAULT = "100 per hour"
    RATELIMIT_STORAGE_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/1')
    
    # File upload security
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'mp4', 'mov'}
    UPLOAD_FOLDER = os.getenv('UPLOAD_FOLDER', './uploads')
    
    # Password requirements
    PASSWORD_MIN_LENGTH = 12
    PASSWORD_REQUIRE_UPPERCASE = True
    PASSWORD_REQUIRE_LOWERCASE = True
    PASSWORD_REQUIRE_NUMBERS = True
    PASSWORD_REQUIRE_SPECIAL = True
    
    # API Security
    API_RATE_LIMIT = "50 per minute"
    API_KEY_EXPIRATION = timedelta(days=90)
    
    # CORS configuration
    CORS_ORIGINS = os.getenv('CORS_ORIGINS', '').split(',')
    CORS_ALLOW_CREDENTIALS = True
    CORS_MAX_AGE = 3600
    
    # Database security
    SQLALCHEMY_ENGINE_OPTIONS = {
        'pool_pre_ping': True,
        'pool_recycle': 300,
        'connect_args': {
            'sslmode': 'require' if 'digitalocean' in os.getenv('DATABASE_URL', '') else 'prefer'
        }
    }
    
    # Logging
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
    LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    LOG_FILE = os.getenv('LOG_FILE', '/var/log/kuwait-social-ai.log')
    
    # OpenAI Security
    OPENAI_TIMEOUT = 30
    OPENAI_MAX_RETRIES = 3
    CONTENT_MODERATION_ENABLED = True
    
    # Kuwait-specific settings
    PRAYER_TIMES_CACHE_TTL = 86400  # 24 hours
    LOCAL_TIMEZONE = 'Asia/Kuwait'
    
    @staticmethod
    def init_app(app):
        """Initialize security configurations"""
        # Set security headers
        @app.after_request
        def set_security_headers(response):
            for header, value in SecureConfig.SECURITY_HEADERS.items():
                response.headers[header] = value
            return response
        
        # Configure logging
        import logging
        logging.basicConfig(
            level=getattr(logging, SecureConfig.LOG_LEVEL),
            format=SecureConfig.LOG_FORMAT,
            handlers=[
                logging.FileHandler(SecureConfig.LOG_FILE),
                logging.StreamHandler()
            ]
        )
EOF
}

# Function to create nginx security configuration
create_nginx_security() {
    cat > nginx-security.conf << 'EOF'
# Security-focused nginx configuration for DigitalOcean

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api:10m rate=50r/m;
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
limit_conn_zone $binary_remote_addr zone=addr:10m;

# Security headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

# SSL configuration (when using custom domain)
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
ssl_prefer_server_ciphers off;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
ssl_stapling on;
ssl_stapling_verify on;

server {
    listen 8080;
    server_name _;
    
    # Hide nginx version
    server_tokens off;
    
    # Limit connections
    limit_conn addr 10;
    
    # Security for specific paths
    location ~ /\.(git|env|DS_Store) {
        deny all;
        return 404;
    }
    
    # API endpoints with rate limiting
    location /api/ {
        limit_req zone=api burst=10 nodelay;
        
        # Only allow specific methods
        if ($request_method !~ ^(GET|POST|PUT|DELETE|OPTIONS)$) {
            return 405;
        }
        
        proxy_pass http://localhost:5000;
        include proxy_params;
    }
    
    # Login endpoint with strict rate limiting
    location /api/auth/login {
        limit_req zone=login burst=2 nodelay;
        proxy_pass http://localhost:5000;
        include proxy_params;
    }
    
    # Static files
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Main app
    location / {
        try_files $uri $uri/ /index.html;
        
        # Security headers for HTML
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
}
EOF

    # Create proxy params file
    cat > proxy_params << 'EOF'
proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_set_header X-Forwarded-Host $server_name;
proxy_redirect off;
proxy_buffering off;
proxy_request_buffering off;
proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection "upgrade";

# Security headers
proxy_hide_header X-Powered-By;
proxy_hide_header Server;

# Timeouts
proxy_connect_timeout 60s;
proxy_send_timeout 60s;
proxy_read_timeout 60s;
EOF
}

# Function to create firewall rules
create_firewall_rules() {
    cat > setup-firewall.sh << 'EOF'
#!/bin/bash
# Configure UFW firewall for DigitalOcean

echo "🔒 Configuring firewall..."

# Default policies
ufw default deny incoming
ufw default allow outgoing

# Allow SSH (adjust port if using custom SSH port)
ufw allow 22/tcp comment 'SSH'

# Allow HTTP and HTTPS
ufw allow 80/tcp comment 'HTTP'
ufw allow 443/tcp comment 'HTTPS'

# Allow custom app port for DigitalOcean App Platform
ufw allow 8080/tcp comment 'App Platform'

# Database (only if needed from external)
# ufw allow from YOUR_APP_IP to any port 5432 comment 'PostgreSQL'

# Redis (only localhost by default)
# ufw allow from 127.0.0.1 to any port 6379 comment 'Redis'

# Enable firewall
echo "y" | ufw enable

# Show status
ufw status verbose

echo "✅ Firewall configured"
EOF
    chmod +x setup-firewall.sh
}

# Function to create backup script
create_backup_script() {
    cat > backup.sh << 'EOF'
#!/bin/bash
# Automated backup script for Kuwait Social AI

BACKUP_DIR="/backups/kuwait-social-ai"
DATE=$(date +%Y%m%d_%H%M%S)
RETENTION_DAYS=7

# Create backup directory
mkdir -p $BACKUP_DIR

echo "🔄 Starting backup..."

# Backup database
if [ -n "$DATABASE_URL" ]; then
    echo "📦 Backing up database..."
    pg_dump $DATABASE_URL > "$BACKUP_DIR/db_backup_$DATE.sql"
    gzip "$BACKUP_DIR/db_backup_$DATE.sql"
fi

# Backup uploads
if [ -d "./uploads" ]; then
    echo "📁 Backing up uploads..."
    tar -czf "$BACKUP_DIR/uploads_backup_$DATE.tar.gz" ./uploads
fi

# Backup configuration (excluding secrets)
echo "⚙️ Backing up configuration..."
tar -czf "$BACKUP_DIR/config_backup_$DATE.tar.gz" \
    --exclude='.env' \
    --exclude='*.pyc' \
    --exclude='__pycache__' \
    --exclude='venv' \
    --exclude='node_modules' \
    config/ frontend-react/public/ *.md

# Clean old backups
echo "🧹 Cleaning old backups..."
find $BACKUP_DIR -name "*.gz" -mtime +$RETENTION_DAYS -delete

# Upload to DigitalOcean Spaces (optional)
if [ -n "$DO_SPACES_ENDPOINT" ]; then
    echo "☁️ Uploading to DigitalOcean Spaces..."
    s3cmd sync $BACKUP_DIR/ s3://your-space-name/backups/ \
        --host=$DO_SPACES_ENDPOINT \
        --host-bucket="%(bucket)s.$DO_SPACES_ENDPOINT"
fi

echo "✅ Backup completed: $BACKUP_DIR"
EOF
    chmod +x backup.sh
}

# Function to create monitoring script
create_monitoring_script() {
    cat > monitor.sh << 'EOF'
#!/bin/bash
# Health monitoring script

check_service() {
    if systemctl is-active --quiet $1; then
        echo "✅ $1 is running"
    else
        echo "❌ $1 is down!"
        # Send alert (configure your alert method)
        # curl -X POST https://api.alerting-service.com/alert
    fi
}

check_endpoint() {
    if curl -s -o /dev/null -w "%{http_code}" $1 | grep -q "200"; then
        echo "✅ $1 is responding"
    else
        echo "❌ $1 is not responding!"
    fi
}

echo "🔍 Monitoring Kuwait Social AI..."
echo "================================"

# Check services
check_service "nginx"
check_service "kuwait-social-backend"
check_service "postgresql"
check_service "redis"

# Check endpoints
check_endpoint "http://localhost/health"
check_endpoint "http://localhost/api/health"

# Check disk space
DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ $DISK_USAGE -gt 80 ]; then
    echo "⚠️ Disk usage is high: ${DISK_USAGE}%"
else
    echo "✅ Disk usage is normal: ${DISK_USAGE}%"
fi

# Check memory
MEM_USAGE=$(free | grep Mem | awk '{print int($3/$2 * 100)}')
if [ $MEM_USAGE -gt 80 ]; then
    echo "⚠️ Memory usage is high: ${MEM_USAGE}%"
else
    echo "✅ Memory usage is normal: ${MEM_USAGE}%"
fi

echo "================================"
echo "📊 Monitoring complete"
EOF
    chmod +x monitor.sh
}

# Main execution
echo "🔐 Creating security configurations..."

# Create directories
mkdir -p config
mkdir -p scripts

# Generate configurations
create_secure_config
create_nginx_security
create_firewall_rules
create_backup_script
create_monitoring_script

# Create cron jobs file
cat > cron-jobs.txt << 'EOF'
# Kuwait Social AI - Automated tasks
# Add these to your crontab with: crontab cron-jobs.txt

# Health monitoring every 5 minutes
*/5 * * * * /path/to/monitor.sh >> /var/log/kuwait-social-monitoring.log 2>&1

# Daily backup at 2 AM
0 2 * * * /path/to/backup.sh >> /var/log/kuwait-social-backup.log 2>&1

# SSL certificate renewal (if using Certbot)
0 0,12 * * * /usr/bin/certbot renew --quiet

# Clean up old logs weekly
0 3 * * 0 find /var/log -name "kuwait-social-*.log" -mtime +30 -delete

# Update prayer times cache daily
0 1 * * * curl -X POST http://localhost/api/prayer-times/update

# Generate weekly analytics report
0 9 * * 1 curl -X POST http://localhost/api/admin/reports/weekly
EOF

echo "✅ Security configurations created!"
echo ""
echo "📋 Created files:"
echo "- config/secure_settings.py - Security configuration for Flask"
echo "- nginx-security.conf - Hardened nginx configuration"
echo "- proxy_params - Nginx proxy parameters"
echo "- setup-firewall.sh - UFW firewall setup"
echo "- backup.sh - Automated backup script"
echo "- monitor.sh - Health monitoring script"
echo "- cron-jobs.txt - Scheduled tasks"
echo ""
echo "🔒 Next steps:"
echo "1. Review and customize the security settings"
echo "2. Run ./setup-firewall.sh to configure firewall"
echo "3. Set up cron jobs: crontab cron-jobs.txt"
echo "4. Test monitoring: ./monitor.sh"
echo "5. Test backup: ./backup.sh"